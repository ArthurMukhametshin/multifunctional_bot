import logging
import os
from datetime import datetime
import uuid
from yookassa import Refund
from aiogram import Bot, F, Router
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, FSInputFile, Message
import database as db
from keyboards import inline as kb
from services import google_sheets as gs
from config_reader import config
from utils import faq_data
from states.user_states import Checklists
from aiogram.fsm.context import FSMContext

router = Router()

def get_welcome_text(user_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return (
        f"–ø—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "—ç—Ç–æ –±–æ—Ç –∞—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–æ-—Ç–≤–æ—Ä–µ–Ω–∏–µü™Ω\n\n"
        "—è –ø—Ä–∏–Ω–µ—Å —Ç–µ–±–µ –º–µ–Ω—é, —á—Ç–æ –±—É–¥–µ—à—å?"
    )

def create_progress_bar(count: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∫–æ—Ç–æ–º –∏ —Å—á–µ—Ç—á–∏–∫–æ–º."""
    if count >= 5:
        progress = "‚ñ†" * 5
        cat_emoji = "üéâ"
        return f"[{progress}] 5 –∏–∑ 5 {cat_emoji}\n–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –Ω–∞–±—Ä–∞–ª 5 –±–∞–ª–ª–æ–≤! –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
    else:
        filled = "‚ñ†" * count
        empty = "‚ñ°" * (5 - count)
        cat_emoji = "üêà"
        return f"[{filled}{empty}] {count} –∏–∑ 5 {cat_emoji}"

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await db.add_user(message.from_user.id, message.from_user.username)
    await message.answer(
        get_welcome_text(message.from_user.first_name),
        reply_markup=kb.main_menu()
    )

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    await callback.message.delete()

    await callback.message.answer(
        get_welcome_text(callback.from_user.first_name),
        reply_markup=kb.main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "loyalty_info")
async def show_loyalty_info(callback: CallbackQuery):
    user_id = callback.from_user.id
    loyalty_count = await db.get_loyalty_count(user_id)
    progress_bar = create_progress_bar(loyalty_count)

    caption = (
        "–∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ¬´—Å–æ-—Ç–≤–æ—Ä–µ–Ω–∏–µ¬ª:\n\n"
        "—Å–æ—Ç–≤–æ—Ä–∏ —Å –¥—Ä—É–≥–æ–º ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–±–∞ –ø–æ 20% —Å–∫–∏–¥–∫–∏!\n\n"
        "–ø–æ—Å–µ—Ç–∏ 5 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ‚Äî –∏ –ø–æ–ª—É—á–∏ 6-–µ –≤ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
        "—Ç–∞–π–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ–π—Ñ–∞:\n"
        "–∑–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—É—á–∏ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–¥–æ–≤—ã–π –∑–∞–º–æ–∫ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ–π—Ñ–∞, –∞ —á—Ç–æ —Ç–∞–º –≤–Ω—É—Ç—Ä–∏ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —É–∑–Ω–∞–µ—à—å?\n\n"
        f"{progress_bar}"
    )

    photo = FSInputFile("loyalty.jpg")
    await callback.message.answer_photo(
        photo=photo, caption=caption, reply_markup=kb.loyalty_info_keyboard()
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "manage_tickets")
async def show_my_tickets_list(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_orders = await db.get_user_paid_orders(user_id)

    if not user_orders:
        await callback.message.edit_text(
            "—É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–∏–∫–æ–≤, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∑–∞–≥–ª—è–Ω—É–≤ –≤ –∞—Ñ–∏—à—É!",
            reply_markup=kb.main_menu()
        )
        return

    orders_with_events = []
    for order in user_orders:
        event = await gs.get_event_by_id_from_sheet(order[2])
        if event:
            orders_with_events.append((order, event))

    await callback.message.edit_text(
        "–≤–æ—Ç —Ç–≤–æ–∏ –±–∏–ª–µ—Ç–∏–∫–∏! –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
        reply_markup=kb.my_tickets_list_keyboard(orders_with_events)
    )

@router.callback_query(F.data.startswith("view_ticket_"))
async def show_ticket_details(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    order = await db.get_order_by_id(order_id)
    event = await gs.get_event_by_id_from_sheet(order[2])

    event_date_str = event['datetime_obj'].strftime('%d.%m.%Y')
    event_time_str = event['datetime_obj'].strftime('%H:%M')

    text = (
        f"—Ç–≤–æ–π –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
        f"**{event['ShortName']}**\n"
        f"–¥–∞—Ç–∞: {event_date_str}\n"
        f"–≤—Ä–µ–º—è: {event_time_str}\n\n"
        "—Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n"
        "–≤–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 48 —á–∞—Å–æ–≤!"
    )
    await callback.message.edit_text(text, reply_markup=kb.ticket_actions_keyboard(order_id), parse_mode="Markdown")

@router.callback_query(F.data.startswith("confirm_cancel_"))
async def confirm_cancellation_prompt(callback: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è.
    """
    order_id = int(callback.data.split("_")[2])
    order = await db.get_order_by_id(order_id)
    event = await gs.get_event_by_id_from_sheet(order[2])

    time_diff = event['datetime_obj'] - datetime.now()
    if time_diff.total_seconds() <= 48 * 3600:
        await callback.answer("—É–ø—Å, –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 48 —á–∞—Å–æ–≤, –æ—Ç–º–µ–Ω–∞ —É–∂–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ ü•≤", show_alert=True)
        return

    await callback.message.edit_text(
        "—Ç—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å? —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ...",
        reply_markup=kb.confirm_cancellation_keyboard(order_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("final_cancel_"))
async def final_cancel_booking(callback: CallbackQuery):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –ÆKassa
    –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞/—Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤.
    """
    await callback.answer("–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–º–µ–Ω—É...")

    order_id = int(callback.data.split("_")[2])
    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.")
        return

    event = await gs.get_event_by_id_from_sheet(order[2])
    if not event:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.")
        return

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±–∏–ª–µ—Ç
    time_diff = event['datetime_obj'] - datetime.now()
    if time_diff.total_seconds() <= 48 * 3600:
        await callback.answer("—É–ø—Å, –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 48 —á–∞—Å–æ–≤, –æ—Ç–º–µ–Ω–∞ —É–∂–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ ü•≤", show_alert=True)
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.",
            reply_markup=kb.ticket_actions_keyboard(order_id)
        )
        return

    payment_id_from_db = order[3]
    amount = str(order[5])
    confirmation_text = ""

    # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–∞

    # –°–¶–ï–ù–ê–†–ò–ô 1: –û—Ç–º–µ–Ω—è–µ—Ç—Å—è –±–∏–ª–µ—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.
    if payment_id_from_db == 'loyalty_program':
        await db.set_loyalty_points(callback.from_user.id, 5)
        confirmation_text = f"—ç—Ö, —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω. –º—ã –≤–µ—Ä–Ω—É–ª–∏ —Ç–µ–±–µ 5 –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –Ω–∞ –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! ‚ú®"

    # –°–¶–ï–ù–ê–†–ò–ô 2: –û—Ç–º–µ–Ω—è–µ—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç (—Ü–µ–Ω–∞ > 0).
    elif float(amount) > 0:
        try:
            idempotence_key = str(uuid.uuid4())
            refund = Refund.create({
                "amount": {"value": amount, "currency": "RUB"},
                "payment_id": payment_id_from_db
            }, idempotence_key)

            if refund.status == 'succeeded' or refund.status == 'pending':
                await db.decrement_loyalty_count(callback.from_user.id)
                confirmation_text = f"—ç—Ö, —Ç–≤–æ–π –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ '{event['ShortName']}' –æ—Ç–º–µ–Ω–µ–Ω –∏ –¥–µ–Ω—å–≥–∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Ç—Å—è!\n\n–æ–¥–∏–Ω –±–∞–ª–ª –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ—Ç –±–∏–ª–µ—Ç –∑–∞–±—Ä–∞–ª–∏ ü•≤"
            else:
                confirmation_text = f"–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç (—Å—Ç–∞—Ç—É—Å –ÆKassa: {refund.status}). –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã"

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
            confirmation_text = "–∫–∞–∫–∏–µ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞. –æ–±—Ä–∞—Ç–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã @cotvorenie_space"

    # –°–¶–ï–ù–ê–†–ò–ô 3: –û—Ç–º–µ–Ω—è–µ—Ç—Å—è –±–∏–ª–µ—Ç –Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
    else:
        confirmation_text = f"–∑–∞–ø–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event['ShortName']}' –æ—Ç–º–µ–Ω–µ–Ω–∞!"

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –Ω–∞—à–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –≤ –ª—é–±–æ–º —É—Å–ø–µ—à–Ω–æ–º —Å–ª—É—á–∞–µ
    if "–æ—à–∏–±–∫–∞" not in confirmation_text and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in confirmation_text:
        await db.update_order_status(order_id, 'cancelled_by_user', 'cancelled')
        await gs.update_order_status_in_sheet(order_id, '–≤–æ–∑–≤—Ä–∞—Ç')

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(confirmation_text)

@router.callback_query(F.data == "get_checklist")
async def get_checklist(callback: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞.
    """
    await state.clear()

    await callback.message.edit_text(
        "—Å—É–ø–µ—Ä, —á–µ–∫-–ª–∏—Å—Ç –ø–æ—á—Ç–∏ —É —Ç–µ–±—è! –∞ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª?\n\n"
        "—Å–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä—è–π!¬ª",
        reply_markup=kb.check_subscription_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "check_subscription")
async def check_subscription_and_show_list(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_channel_status = await bot.get_chat_member(chat_id=config.channel_id, user_id=callback.from_user.id)

    if user_channel_status.status != 'left':
        try:
            files = [f for f in os.listdir('checklists') if f.endswith('.pdf')]
            if not files:
                await callback.message.edit_text("—É–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –∑–∞–≥–ª—è–Ω–∏ —á—É—Ç—å –ø–æ–∑–∂–µ!",
                                                 reply_markup=kb.main_menu())
                return
            await state.update_data(checklist_files=files)
            await state.set_state(Checklists.choosing_checklist)

            await callback.message.edit_text(
                "–±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ:",
                reply_markup=kb.checklists_keyboard(files)
            )
        except FileNotFoundError:
            await callback.message.edit_text("—Å—É–Ω–¥—É–∫ —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏ –≥–¥–µ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª—Å—è... –º–æ–π –±–æ—Å—Å —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç!",
                                             reply_markup=kb.main_menu())
    else:
        await callback.answer("—ç–π! –∞ –Ω—É-–∫–∞ –ø–æ–¥–ø–∏—à–∏—Å—å!\n\n–±–µ–∑ —Ç—Ä—É–¥–∞ –Ω–µ –≤—ã–Ω–µ—à—å —Ä—ã–±–∫—É –∏–∑ –ø—Ä—É–¥–∞!", show_alert=True)


@router.callback_query(Checklists.choosing_checklist, F.data.startswith("checklist_"))
async def send_checklist_file(callback: CallbackQuery, state: FSMContext):
    try:
        file_index = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    files = user_data.get('checklist_files')

    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    if files and 0 <= file_index < len(files):
        file_name = files[file_index]
        file_path = os.path.join('checklists', file_name)

        if os.path.exists(file_path):
            document = FSInputFile(file_path)
            button_text = file_name.replace('.pdf', '').replace('_', ' ').capitalize()
            await callback.message.delete()
            await callback.message.answer_document(document, caption=f"–¥–µ—Ä–∂–∏ —á–µ–∫-–ª–∏—Å—Ç ¬´{button_text}¬ª!")
            await callback.answer()
        else:
            await callback.answer("–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç —á–µ–∫-–ª–∏—Å—Ç... –≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —É–¥–∞–ª–∏–ª–∏", show_alert=True)
    else:
        await callback.answer("–Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç—ã... –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Ö —É–¥–∞–ª–∏–ª–∏", show_alert=True)

    await state.clear()

@router.callback_query(F.data == "faq")
async def show_faq_list(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ FAQ.
    """
    await callback.message.edit_text(
        f"ü´Ç —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n{faq_data.FAQ_FOOTER_TEXT}",
        reply_markup=kb.faq_list_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("faq_"))
async def show_faq_answer(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    question_key = callback.data.split("_", 1)[1]

    question_text, answer_text = faq_data.FAQ_DATA.get(question_key)

    if question_text and answer_text:
        full_text = f"{question_text}\n\n{answer_text}"
        await callback.message.edit_text(
            full_text,
            reply_markup=kb.faq_answer_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback.answer("–ø—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å...–º–Ω–µ –Ω–µ —Å–æ–æ–±—â–∏–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

@router.callback_query(F.data == "invite_friend")
async def invite_friend(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await callback.answer("—Å–æ–∑–¥–∞—é —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥...")
    referral_code = await gs.generate_and_add_referral_code(callback.from_user.id)

    if referral_code:
        await callback.message.edit_caption(
            caption=(
                "–æ—Ç–ª–∏—á–Ω–æ! –≤–æ—Ç —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥—Ä—É–≥–∞:\n\n"
                f"`{referral_code}`\n\n"
                "–æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –¥—Ä—É–≥—É. –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –∫—É–ø–∏—Ç –ø–æ –Ω–µ–º—É –±–∏–ª–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 20%, "
                "—è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É!"
            ),
            reply_markup=kb.loyalty_info_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.answer("—É–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥. –ø–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ø—É—Å—Ç—è –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã üôè", show_alert=True)