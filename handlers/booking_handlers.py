import logging
import os
import uuid
from bot import scheduler
from datetime import datetime, timedelta
from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from yookassa import Configuration, Payment
from config_reader import config
import database as db
from keyboards import inline as kb
from services import google_sheets as gs
from services.ticket_generator import generate_ticket_image
from states.user_states import Booking
from utils.scheduler import request_feedback, send_arrival_info

router = Router()

Configuration.account_id = config.yookassa_shop_id.get_secret_value()
Configuration.secret_key = config.yookassa_secret_key.get_secret_value()

async def issue_ticket(callback: CallbackQuery, bot: Bot, order_id: int, event: dict, price: int, promo_code: str | None, original_price: int, payment_id: str):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ –±–∏–ª–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    """

    user_db_info = await db.get_user_by_id(callback.from_user.id)
    full_name = user_db_info[2] if user_db_info else "–ì–æ—Å—Ç—å"
    phone_number = user_db_info[3] if user_db_info else "–ù–µ —É–∫–∞–∑–∞–Ω"

    date_str = event['datetime_obj'].strftime('%d.%m.%Y –≤ %H:%M')
    ticket_path = generate_ticket_image(
        event_name=event['ShortName'], fio=full_name, date_str=date_str, address="—É–ª. –ü–∞–≤–ª–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞, –¥. 23 —Å. 12"
    )

    if not ticket_path:
        await bot.send_message(callback.from_user.id,
                               "—É–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π –±–∏–ª–µ—Ç–∏–∫. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã @cotvorenie_space")
        return

    await gs.add_client_to_sheet(user_id=callback.from_user.id, username=callback.from_user.username,
                                 full_name=full_name, phone_number=phone_number)
    await gs.add_order_to_sheet(order_id=order_id, user_id=callback.from_user.id, event_name=event['ShortName'],
                                event_date=event['DateTime'], amount=price, status='–æ–ø–ª–∞—á–µ–Ω–æ', promo_code=promo_code)

    caption_text = ""

    # –°–¶–ï–ù–ê–†–ò–ô 1: –ë–∏–ª–µ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    if payment_id == 'loyalty_program':
        await db.reset_loyalty_count(callback.from_user.id)
        caption_text = (
            f"—Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ ¬´{event['ShortName']}¬ª –≥–æ—Ç–æ–≤!\n\n"
            "—Å—á–µ—Ç—á–∏–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω—É–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ç—å —Å–Ω–æ–≤–∞!\n\n"
        )

    # –°–¶–ï–ù–ê–†–ò–ô 2: –ë–∏–ª–µ—Ç –±—ã–ª –û–ü–õ–ê–ß–ï–ù —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ (—Ü–µ–Ω–∞ > 0)
    elif price > 0:
        await db.increment_loyalty_count(callback.from_user.id)
        loyalty_count_after = await db.get_loyalty_count(callback.from_user.id)
        caption_text = (
            f"—Ç–≤–æ–π –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ ¬´{event['ShortName']}¬ª –≥–æ—Ç–æ–≤!\n\n"
            f"+1 –±–∞–ª–ª –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {loyalty_count_after} –∏–∑ 5!\n\n"
        )

    # –°–¶–ï–ù–ê–†–ò–ô 3: –ë–∏–ª–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–ª–∏ –∏–∑-–∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞), –Ω–æ –ù–ï –ø–æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    else:
        caption_text = f"—Ç–≤–æ–π –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´{event['ShortName']}¬ª –≥–æ—Ç–æ–≤!\n\n"

    caption_text += "–≤–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 48 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n—Å–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ –∏ –ø–æ–∫–∞–∂–∏ –Ω–∞ –≤—Ö–æ–¥–µ –æ—Ö—Ä–∞–Ω–µ. –¥–æ –≤—Å—Ç—Ä–µ—á–∏!"

    photo = FSInputFile(ticket_path)
    await bot.send_photo(callback.from_user.id, photo, caption=caption_text, parse_mode="Markdown")

    try:
        os.remove(ticket_path)
    except OSError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–∏–ª–µ—Ç–∞ {ticket_path}: {e}")

    time_until_event = event['datetime_obj'] - datetime.now()
    if time_until_event.total_seconds() < 24 * 3600:
        await send_arrival_info(bot, callback.from_user.id, callback.from_user.first_name, event, order_id)
    else:
        run_date_24h = event['datetime_obj'] - timedelta(hours=24)
        scheduler.add_job(send_arrival_info, trigger='date', run_date=run_date_24h,
                          kwargs={'bot': bot, 'user_id': callback.from_user.id,
                                  'user_name': callback.from_user.first_name, 'event': event, 'order_id': order_id})
        await bot.send_message(callback.from_user.id,
                               "–∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –º—ã –≤—ã—à–ª–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏. –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—à—å—Å—è! üòâ")

    feedback_date = event['datetime_obj'] + timedelta(hours=18)
    scheduler.add_job(
        request_feedback,
        trigger='date',
        run_date=feedback_date,
        kwargs={'bot': bot, 'user_id': callback.from_user.id, 'order_id': order_id}
    )
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–∞ {feedback_date}")

@router.callback_query(F.data == "events")
async def show_events_afisha(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—Ñ–∏—à—É ‚Äî —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã.
    –ö–∞–∂–¥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ‚Äî —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ Google Sheets
    events = gs.get_events_from_sheet()

    if not events:
        await callback.message.edit_text(
            "—É–ø—Å! —è –≤ —Å–ø—è—á–∫–µ, –Ω–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã @cotvorenie_space",
            reply_markup=kb.main_menu()
        )
        return

    await callback.message.edit_text(
        "—á—Ç–æ —Å–æ—Ç–≤–æ—Ä–∏–º?\n\n–≤—ã–±–∏—Ä–∞–π:",
        reply_markup=kb.events_keyboard(events),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("event_"))
async def show_event_details(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.
    –ü–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ –±–∏–ª–µ—Ç.
    """
    event_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    has_ticket = await db.check_if_ticket_exists(user_id, event_id)
    event = await gs.get_event_by_id_from_sheet(event_id)

    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    event_date_str = event['datetime_obj'].strftime('%d.%m.%Y')
    event_time_str = event['datetime_obj'].strftime('%H:%M')

    text = ""
    reply_markup = None

    if has_ticket:
        text = (
            f"**{event['ShortName']}**\n\n"
            f"–¥–∞—Ç–∞: {event_date_str}\n"
            f"–≤—Ä–µ–º—è: {event_time_str}\n\n"
            "—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ! "
            "–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ø–æ—Å–º–æ—Ç—Ä—é –º–æ–∏ –±–∏–ª–µ—Ç—ã¬ª"
        )
        reply_markup = kb.already_booked_keyboard()
    else:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–î–ò–ù–ê–†–ù–´–ï –ö–ê–í–´–ß–ö–ò –î–õ–Ø –ö–õ–Æ–ß–ê 'Price'
        price_text = '–±–µ—Å–ø–ª–∞—Ç–Ω–æ' if event['Price'] == 0 else f"{event['Price']} —Ä—É–±."

        text = (
            f"**{event['ShortName']}**\n\n"
            f"–¥–∞—Ç–∞: {event_date_str}\n"
            f"–≤—Ä–µ–º—è: {event_time_str}\n"
            f"—Å—Ç–æ–∏–º–æ—Å—Ç—å: {price_text}\n\n"
            f"{event['Description']}"
        )
        reply_markup = kb.event_details_keyboard(event_id)

    await callback.message.edit_text(
        text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_"))
async def start_booking_process(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç".
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û.
    """
    event_id = int(callback.data.split("_")[1])
    event = await gs.get_event_by_id_from_sheet(event_id)

    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(
        event_id=event['ID'],
        event_name=event['ShortName'],
        price=event['Price'],
        original_price=event['Price']
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (6-–π –±–∏–ª–µ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫)
    loyalty_count = await db.get_loyalty_count(callback.from_user.id)

    if loyalty_count >= 5:
        await state.update_data(price=0, is_loyalty_ticket=True)
        text = (
            f"üéâ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! —Ç—ã –Ω–∞–∫–æ–ø–∏–ª {loyalty_count} –ø–æ—Å–µ—â–µ–Ω–∏–π, –∏ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ç–µ–±—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ!\n\n"
            f"–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['ShortName']}\n\n"
            "–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∏–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û"
        )
    else:
        await state.update_data(is_loyalty_ticket=False)
        text = (
            f"—Ç–≤–æ–π –≤—ã–±–æ—Ä ‚Äî –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ!\n\n–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –Ω–∞ ¬´{event['ShortName']}¬ª –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û\n\n"
            # f"üí° *–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å {remaining} –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞!*"
        )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–ø—Ä—ã–∂–∫–æ–≤" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await callback.message.edit_text(text, parse_mode="Markdown")
    await state.set_state(Booking.entering_name)
    await callback.answer()

@router.message(Booking.entering_name)
async def enter_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω."""
    await state.update_data(full_name=message.text)
    await message.answer("—Å—É–ø–µ—Ä! –æ—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–π –Ω–æ–º–µ—Ä–æ–∫?")
    await state.set_state(Booking.entering_phone)

@router.message(Booking.entering_phone)
async def enter_phone(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –ø—Ä–æ–º–æ–∫–æ–¥."""
    await state.update_data(phone_number=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –ë–î
    user_data = await state.get_data()
    await db.update_user_contacts(message.from_user.id, user_data['full_name'], user_data['phone_number'])

    # –¢–µ–ø–µ—Ä—å –Ω–µ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–º–æ–∫–æ–¥
    await message.answer(
        "–æ—Ç–ª–∏—á–Ω–æ! —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É? üòë",
        reply_markup=kb.promo_code_keyboard()
    )
    await state.set_state(Booking.waiting_for_promo)

@router.callback_query(Booking.waiting_for_promo, F.data == "has_promo")
async def ask_for_promo_code(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    await callback.message.edit_text("–≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(Booking.entering_promo_code)
    await callback.answer()

@router.message(Booking.entering_promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –ø–æ—Ä—è–¥–∫–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏.
    """
    promo_code = message.text.strip().upper()
    promo_details = await gs.get_promo_details(promo_code)

    error_message = None

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Ññ1: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ?
    if not promo_details:
        error_message = "—É–≤—ã, —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç. –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∫–∏–¥–∫–∏ ü•≤"

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Ññ2 (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤): –ù–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥?
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ—Ç –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –≤–∞–∂–Ω–µ–µ.
    elif promo_details.get('type') == 'referral_invite' and promo_details.get('owner_id') == message.from_user.id:
        error_message = "—ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞. —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–∞–º! üòâ"

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Ññ3: –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥? (–Ω–µ –±—ã–ª –ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
    elif promo_details.get('status') != 'active':
        error_message = "—ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–∫–∏–¥–∫–∏ ü•≤"

    # –ï—Å–ª–∏ –±—ã–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Ç–æ–≥–∞–º
    if error_message:
        await message.answer(error_message)
        await show_confirmation_summary(message, state)
        return

    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –∏ –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    user_data = await state.get_data()
    original_price = user_data.get('price')
    discount = promo_details['discount']
    new_price = int(original_price * (1 - discount / 100))

    await state.update_data(price=new_price, promo_code=promo_code, promo_details=promo_details)
    await message.answer(f"–ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! —Ç–≤–æ—è —Å–∫–∏–¥–∫–∞ ‚Äî {discount}%. –Ω–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} —Ä—É–±.")

    await show_confirmation_summary(message, state)

# 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ë–ï–ó –ü–†–û–ú–û–ö–û–î–ê"
@router.callback_query(Booking.waiting_for_promo, F.data == "no_promo")
async def no_promo_code(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await show_confirmation_summary(callback.message, state)  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.answer()

# 4. –í–´–ù–û–°–ò–ú –õ–û–ì–ò–ö–£ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –í –û–¢–î–ï–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
async def show_confirmation_summary(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏–±–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –ª–∏–±–æ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç –Ω–µ–≥–æ.
    """
    user_data = await state.get_data()
    promo_code_info = f"\n–ø—Ä–æ–º–æ–∫–æ–¥: {user_data['promo_code']}" if 'promo_code' in user_data else ""

    price_text = '–±–µ—Å–ø–ª–∞—Ç–Ω–æ' if user_data['price'] == 0 else f"{user_data['price']} —Ä—É–±."

    text = (
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n"
        f"–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: **{user_data['event_name']}**\n"
        f"–§–ò–û: {user_data['full_name']}\n"
        f"—Ç–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}{promo_code_info}\n"
        f"–∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{price_text}**\n\n"
        "–Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
    )

    await message.answer(
        text,
        reply_markup=kb.confirm_booking_keyboard(user_data['event_id']),
        parse_mode="Markdown"
    )
    await state.set_state(Booking.confirming_data)

@router.callback_query(Booking.confirming_data, F.data.startswith("book_"))
async def confirm_booking(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –∏–ª–∏ –≤—ã–¥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç."""
    await callback.answer()

    user_data = await state.get_data()
    price = user_data.get('price')
    original_price = user_data.get('original_price')
    promo_code = user_data.get('promo_code')
    is_loyalty = user_data.get('is_loyalty_ticket', False)

    event = await gs.get_event_by_id_from_sheet(user_data['event_id'])

    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç
    if price == 0:
        await callback.message.edit_text("–æ—Ñ–æ—Ä–º–ª—è–µ–º —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç–∏–∫...")

        # --- –ù–û–í–ê–Ø, –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê ---
        payment_id_for_db = 'loyalty_program' if is_loyalty else 'generated_ticket'

        order_id = await db.create_order(callback.from_user.id, user_data['event_id'], 0)
        await db.update_order_status(order_id, payment_id_for_db, 'paid')

        await issue_ticket(
            callback=callback, bot=bot, order_id=order_id, event=event, price=0,
            promo_code=promo_code, original_price=original_price, payment_id=payment_id_for_db
        )
        await state.clear()
        return

    # –°–¶–ï–ù–ê–†–ò–ô 2: –ü–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç
    order_id = await db.create_order(callback.from_user.id, user_data['event_id'], price)

    try:
        payment = Payment.create({
            "amount": {"value": f"{price}.00", "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": f"https://t.me/{(await bot.get_me()).username}"},
            "capture": True,
            "description": f"–ë–∏–ª–µ—Ç –Ω–∞ ¬´{user_data['event_name']}¬ª. –ó–∞–∫–∞–∑ #{order_id}",
            "metadata": {"order_id": order_id, "promo_code": promo_code}
        }, uuid.uuid4())

        await db.update_order_payment_id(order_id, payment.id)

        await callback.message.edit_text(
            "–æ—Ç–ª–∏—á–Ω–æ! –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –æ–ø–ª–∞—Ç–∞ üí∞\n\n"
            "–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã. –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏ ¬´—è –æ–ø–ª–∞—Ç–∏–ª, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª",
            reply_markup=kb.payment_keyboard(payment.confirmation.confirmation_url, payment.id)
        )
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        await callback.message.edit_text(
            "—É–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã @cotvorenie_space")
        await state.clear()

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "—è –æ–ø–ª–∞—Ç–∏–ª".
    –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –≤—ã–¥–∞–µ—Ç –±–∏–ª–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    await callback.answer("–ø—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    payment_id = callback.data.split("_")[2]

    try:
        payment_info = Payment.find_one(payment_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)
        return

    if payment_info.status == 'succeeded':
        order_id = int(payment_info.metadata['order_id'])
        order = await db.get_order_by_id(order_id)

        if order and order[4] == 'paid':
            await callback.answer("–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω.", show_alert=True)
            return

        await callback.message.edit_text("‚úîÔ∏è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! —Å–µ–π—á–∞—Å —è –ø—Ä–∏—à–ª—é —Ç–≤–æ–π –±–∏–ª–µ—Ç–∏–∫...")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ë–î –Ω–∞ 'paid'
        await db.update_order_status(order_id, payment_id, 'paid')

        reward_code = None

        promo_code = payment_info.metadata.get('promo_code')
        if promo_code:
            promo_details = await gs.get_promo_details(promo_code)
            if promo_details and promo_details['type'] == 'referral_invite':
                reward_code = await gs.activate_referral_code(
                    row_index=promo_details['row_index'],
                    friend_user_id=callback.from_user.id,
                    friend_order_id=order_id
                )

        if reward_code:
            try:
                await bot.send_message(
                    chat_id=promo_details['owner_id'],
                    text=f"—É—Ä–∞! —Ç–≤–æ–π –¥—Ä—É–≥ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º. –≤–æ—Ç —Ç–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 20% —Å–∫–∏–¥–∫–∏: `{reward_code}`",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥–Ω–æ–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {promo_details['owner_id']}: {e}")

        event = await gs.get_event_by_id_from_sheet(order[2])
        price = order[5]
        original_price = event['Price']

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –æ–±—â—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∏–ª–µ—Ç–∞
        await issue_ticket(callback, bot, order_id, event, price, promo_code, original_price, payment_id)

    elif payment_info.status == 'pending':
        await callback.answer("–ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª. –ø–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ü•π", show_alert=True)


    else:
        await callback.message.edit_text(
            f"–ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª (—Å—Ç–∞—Ç—É—Å: {payment_info.status}) ü•≤\n\n–ø–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏–∑ –∞—Ñ–∏—à–∏"

        )